#################################
### DO NOT EDIT THIS FILE !!! ###
#################################
"""
Do not edit this file; it is used
by the autograder.  However, you
are welcome and encouraged to
write your own testing code in 
the main file or in your own file.
"""
import pytest
from lists import Doubly_Linked_List

import time
""" benchmark(testfunction, inputvalue) measures
    how long it takes to run the given function
    on the given input. """

def benchmark(testfunction):
    start = time.perf_counter()
    testfunction()
    stop = time.perf_counter()
    return stop-start

def benchmark2(testfunction):
    start = time.perf_counter()
    testfunction(0)
    stop = time.perf_counter()
    return stop-start

######  Problem #5 #########################

def test_P5_create_empty_Linked_List():
    l = Doubly_Linked_List()
    assert l.isEmpty() == True

def test_P5_create_noempty_Linked_List():
    l = Doubly_Linked_List()
    l.add("test")
    assert l.isEmpty() == False

def test_P5_one_element_LL_size():
    l = Doubly_Linked_List()
    l.add("test")
    assert l.size() == 1

def test_P5_one_element_LL_pop():
    l = Doubly_Linked_List()
    l.add("test")
    assert l.pop() == "test"

def test_P5_one_element_LL_pop_empty():
    l = Doubly_Linked_List()
    l.add("test")
    l.pop()
    assert l.isEmpty() == True

def make4eltlist():
    l = Doubly_Linked_List()
    l.add(4)
    l.add(3)
    l.add(2)
    l.add(1)
    return l

def test_P5_remove_first_size():
    l = make4eltlist()
    l.remove(1)
    assert l.size() == 3

def test_P5_remove_first_pop0():
    l = make4eltlist()
    l.remove(1)
    assert l.popfrom(0) == 2

def test_P5_remove_first_pop():
    l = make4eltlist()
    l.remove(1)
    assert l.pop() == 4

def test_P5_remove_middle_size():
    l = make4eltlist()
    l.remove(2)
    assert l.size() == 3

def test_P5_remove_middle_popnext():
    l = make4eltlist()
    l.remove(2)
    assert l.popfrom(1) == 3

def test_P5_remove_middle_pop():
    l = make4eltlist()
    l.remove(2)
    assert l.pop() == 4

def test_P5_remove_end_size():
    l = make4eltlist()
    l.remove(4)
    assert l.size() == 3

def test_P5_remove_end_pop0():
    l = make4eltlist()
    l.remove(4)
    assert l.popfrom(0) == 1

def test_P5_remove_end_pop():
    l = make4eltlist()
    l.remove(4)
    assert l.pop() == 3


def test_P5_remove_missing():
    l = make4eltlist()
    with pytest.raises(Exception):
        l.remove(6)


def test_P5_search_middle():
    l = make4eltlist()
    assert l.search(3) == True


def test_P5_search_missing():
    l = make4eltlist()
    assert l.search(6) == False

def test_P5_append_length():
    l = make4eltlist()
    l.append(5)
    assert l.size() == 5
    
def test_P5_append_pop():
    l = make4eltlist()
    l.append(5)
    assert l.pop() == 5
    
def test_P5_remove_index1():
    l = make4eltlist()
    l.remove(3)
    assert l.index(1) == 0

def test_P5_remove_index2():
    l = make4eltlist()
    l.remove(3)
    assert l.index(2) == 1

def test_P5_remove_index3():
    l = make4eltlist()
    l.remove(3)
    assert l.index(4) == 2

def test_P5_index_missing():
    l = make4eltlist()
    l.remove(3)
    with pytest.raises(Exception):
        l.index(6)

def test_P5_insert_beginning():
    l = make4eltlist()
    l.insert(0,7)
    assert l.index(7) == 0

def test_P5_insert_beginning2():
    l = make4eltlist()
    l.insert(0,7)
    assert l.index(1) == 1

def test_P5_insert_middle():
    l = make4eltlist()
    l.insert(2,7)
    assert l.index(7) == 2

def test_P5_insert_middle2():
    l = make4eltlist()
    l.insert(2,7)
    assert l.index(2) == 1

def test_P5_insert_middle3():
    l = make4eltlist()
    l.insert(2,7)
    assert l.index(3) == 3

def test_P5_insert_end():
    l = make4eltlist()
    l.insert(4,7)
    assert l.index(7) == 4

def test_P5_insert_empty():
    l = Doubly_Linked_List()
    l.insert(0, 7)
    assert l.index(7) == 0


def create_list_of_size(n):
    l = Doubly_Linked_List()
    for i in range(n):
        l.add(i)
    return l

def test_P5_pop_constant_time():
    short = create_list_of_size(10)
    long = create_list_of_size(1000)
    shorttime = benchmark(short.pop)
    longtime = benchmark(long.pop)
    assert longtime < 5 * shorttime

def test_P5_append_constant_time():
    short = create_list_of_size(10)
    long = create_list_of_size(1000)
    shorttime = benchmark2(short.append)
    longtime = benchmark2(long.append)
    assert longtime < 5 * shorttime









