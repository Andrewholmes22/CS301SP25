#################################
### DO NOT EDIT THIS FILE !!! ###
#################################
"""
Do not edit this file; it is used
by the autograder.  However, you
are welcome and encouraged to
write your own testing code in 
the main file or in your own file.
"""
import pytest
from lists import Linked_List

######  Problem #4 #########################

def test_P4_create_empty_Linked_List():
    l = Linked_List()
    assert l.isEmpty() == True

def test_P4_create_noempty_Linked_List():
    l = Linked_List()
    l.add("test")
    assert l.isEmpty() == False

def test_P4_one_element_LL_size():
    l = Linked_List()
    l.add("test")
    assert l.size() == 1

def test_P4_one_element_LL_pop():
    l = Linked_List()
    l.add("test")
    assert l.pop() == "test"

def test_P4_one_element_LL_pop_empty():
    l = Linked_List()
    l.add("test")
    l.pop()
    assert l.isEmpty() == True

def make4eltlist():
    l = Linked_List()
    l.add(4)
    l.add(3)
    l.add(2)
    l.add(1)
    return l

def test_P4_remove_first_size():
    l = make4eltlist()
    l.remove(1)
    assert l.size() == 3

def test_P4_remove_first_pop0():
    l = make4eltlist()
    l.remove(1)
    assert l.popfrom(0) == 2

def test_P4_remove_first_pop():
    l = make4eltlist()
    l.remove(1)
    assert l.pop() == 4

def test_P4_remove_middle_size():
    l = make4eltlist()
    l.remove(2)
    assert l.size() == 3

def test_P4_remove_middle_popnext():
    l = make4eltlist()
    l.remove(2)
    assert l.popfrom(1) == 3

def test_P4_remove_middle_pop():
    l = make4eltlist()
    l.remove(2)
    assert l.pop() == 4

def test_P4_remove_end_size():
    l = make4eltlist()
    l.remove(4)
    assert l.size() == 3

def test_P4_remove_end_pop0():
    l = make4eltlist()
    l.remove(4)
    assert l.popfrom(0) == 1

def test_P4_remove_end_pop():
    l = make4eltlist()
    l.remove(4)
    assert l.pop() == 3


def test_P4_remove_missing():
    l = make4eltlist()
    with pytest.raises(Exception):
        l.remove(6)


def test_P4_search_middle():
    l = make4eltlist()
    assert l.search(3) == True


def test_P4_search_missing():
    l = make4eltlist()
    assert l.search(6) == False

def test_P4_append_length():
    l = make4eltlist()
    l.append(5)
    assert l.size() == 5
    
def test_P4_append_pop():
    l = make4eltlist()
    l.append(5)
    assert l.pop() == 5
    
def test_P4_remove_index1():
    l = make4eltlist()
    l.remove(3)
    assert l.index(1) == 0

def test_P4_remove_index2():
    l = make4eltlist()
    l.remove(3)
    assert l.index(2) == 1

def test_P4_remove_index3():
    l = make4eltlist()
    l.remove(3)
    assert l.index(4) == 2

def test_P4_index_missing():
    l = make4eltlist()
    l.remove(3)
    with pytest.raises(Exception):
        l.index(6)

def test_P4_insert_beginning():
    l = make4eltlist()
    l.insert(0,7)
    assert l.index(7) == 0

def test_P4_insert_beginning2():
    l = make4eltlist()
    l.insert(0,7)
    assert l.index(1) == 1

def test_P4_insert_middle():
    l = make4eltlist()
    l.insert(2,7)
    assert l.index(7) == 2

def test_P4_insert_middle2():
    l = make4eltlist()
    l.insert(2,7)
    assert l.index(2) == 1

def test_P4_insert_middle3():
    l = make4eltlist()
    l.insert(2,7)
    assert l.index(3) == 3

def test_P4_insert_end():
    l = make4eltlist()
    l.insert(4,7)
    assert l.index(7) == 4

def test_P4_insert_empty():
    l = Linked_List()
    l.insert(0, 7)
    assert l.index(7) == 0











